{"version":3,"sources":["store/PokeStore.js","components/Constants.js","components/PokeItemModal.js","components/PokeItem.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["pokeContext","createContext","PokeProvider","children","store","useLocalStore","count","increment","decrement","Provider","value","getColor","type","ret","PokeItemModal","props","className","data","sprites","src","front_default","alt","name","style","width","base_experience","height","weight","types","map","titem","idx","key","color","stats","item","stat","base_stat","PropTypes","propTypes","node","pokeData","object","isRequired","PokeItem","useState","setPokeData","isModal","setIsModal","useEffect","a","fetch","url","json","then","res","catch","fetchData","useObserver","onClick","title","visible","onOk","onCancel","id","Option","Select","Search","Input","Main","pokeItem","setPokeItem","offset","setOffset","limit","setLimit","searchBy","setSearchBy","searchValue","setSearchValue","isResetVisible","setIsResetVisible","results","e","console","log","onShowSizeChange","onChangePage","Group","compact","display","defaultValue","onChange","placeholder","size","onSearch","onSearchData","target","Array","isArray","showSizeChanger","defaultCurrent","total","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e2a6dda9.chunk.js","sourcesContent":["import React, { createContext } from 'react'\nimport { useLocalStore } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\n\nexport const pokeContext = createContext()\n\nconst PokeProvider = ({ children }) => {\n  const store = useLocalStore(() => ({\n    count: 1,\n    increment () {\n      store.count++\n    },\n    decrement () {\n      store.count--\n    }\n  }))\n\n  return (\n    <pokeContext.Provider value={store}>{children}</pokeContext.Provider>\n  )\n}\n\nPokeProvider.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default PokeProvider\n","\nexport default function getColor (type) {\n  let ret = ''\n  switch (type) {\n    case 'poison':\n      ret = '#2db7f5'\n      break\n    case 'ground':\n      ret = '#87d068'\n      break\n    case 'electric':\n      ret = '#108ee9'\n      break\n    case 'fire':\n      ret = '#FF0000'\n      break\n    case 'fairy':\n      ret = '#CCFFCC'\n      break\n    case 'normal':\n      ret = '#E5CCFF'\n      break\n    case 'flying':\n      ret = '#f50'\n      break\n    default:\n      break\n  }\n  return ret\n};\n","import React from 'react'\nimport { Tag } from 'antd'\nimport PropTypes from 'prop-types'\n\nimport getColor from './Constants'\n\nconst PokeItemModal = (props) => {\n  return <div className=\"poke_item_body\">\n    <div className=\"modal_img\">{props.data.sprites ? <img src={props.data.sprites.front_default} alt={props.name} /> : ''}</div>\n    <div><h3 className=\"no_margin\">{props.name}</h3></div>\n\n    <div className=\"modal_body\">\n      <div style={{ width: '50%' }}>\n        <div><h4 className=\"no_margin\">Experience: {props.data.base_experience}</h4></div>\n        <div><h4 className=\"no_margin\">Height: {props.data.height}</h4></div>\n        <div><h4 className=\"no_margin\">Weight: {props.data.weight}</h4></div>\n        <div>\n          {props.data.types\n            ? props.data.types.map(\n              (titem, idx) => (\n                <div key={titem + idx}>\n                  <Tag color={getColor(titem.type.name)} className=\"no_margin\">\n                    {titem.type.name}\n                  </Tag>\n                </div>)\n            ) : ''}\n        </div>\n\n      </div>\n      <div style={{ width: '50%' }}>\n        <div><h4 className=\"no_margin\">base_stat: {\n          props.data.stats ? props.data.stats.map(\n            (item, idx) => (\n              <div key={item + idx}>{item.stat.name}: {item.base_stat}</div>\n            )) : ''}</h4>\n        </div>\n      </div>\n    </div>\n\n  </div>\n}\n\nPokeItemModal.propTypes = {\n  name: PropTypes.string\n}\nexport default PokeItemModal\n","import React, { useState, useEffect } from 'react'\nimport { useObserver } from 'mobx-react-lite'\nimport { Tag } from 'antd'\nimport PropTypes from 'prop-types'\n\nimport Modal from 'antd/lib/modal/Modal'\nimport PokeItemModal from './PokeItemModal'\nimport getColor from './Constants'\n\nconst PokeItem = (props) => {\n  const [pokeData, setPokeData] = useState([])\n  const [isModal, setIsModal] = useState(false)\n\n  useEffect(() => {\n    async function fetchData () {\n      if (props.data) {\n        setPokeData(props.data)\n      } else {\n        const res = await fetch(props.url)\n        res.json()\n          .then(res => {\n            setPokeData(res)\n          })\n          .catch(() => null)\n      }\n    }\n    fetchData()\n  }, [props.data, props.url])\n\n  return useObserver(() => (\n    <div className=\"poke_item_body\" onClick={() => setIsModal(!isModal)}>\n      <Modal\n        title={props.name}\n        visible={isModal}\n        onOk={() => setIsModal(false)}\n        onCancel={() => setIsModal(false)}\n      >\n        <PokeItemModal data={pokeData} name={props.name}/>\n      </Modal>\n      <div>{pokeData.sprites ? <img src={pokeData.sprites.front_default} alt={props.name} /> : ''}</div>\n      <div><h3 className=\"no_margin\">{props.name}</h3></div>\n      <div><h4 className=\"no_margin\">ID: {pokeData.id}</h4></div>\n      <div><h4 className=\"no_margin\">Experience: {pokeData.base_experience}</h4></div>\n      <div><h4 className=\"no_margin\">Height: {pokeData.height}</h4></div>\n      <div><h4 className=\"no_margin\">Weight: {pokeData.weight}</h4></div>\n      <div>\n        {pokeData.types\n          ? pokeData.types.map(\n            (titem, idx) => (\n              <div key={titem + idx}>\n                <Tag color={getColor(titem.type.name)} className=\"no_margin\">\n                  {titem.type.name}\n                </Tag>\n              </div>)\n          ) : ''}\n      </div>\n\n    </div>\n  ))\n}\nPropTypes.propTypes = {\n  data: PropTypes.node,\n  pokeData: PropTypes.object.isRequired\n}\nexport default PokeItem\n","import React, { useEffect, useState } from 'react'\nimport { useObserver } from 'mobx-react-lite'\n// import { pokeContext } from '../store/PokeStore'\n// import {axios} from 'axios';\n\nimport './Main.scss'\nimport PokeItem from './PokeItem'\nimport { Pagination, Input, Select, Button } from 'antd'\n\nconst { Option } = Select\nconst { Search } = Input\n\nconst Main = () => {\n  // const store = useContext(pokeContext)\n  const [pokeData, setPokeData] = useState([])\n  const [pokeItem, setPokeItem] = useState('')\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [searchBy, setSearchBy] = useState('Name')\n  const [searchValue, setSearchValue] = useState('')\n  const [isResetVisible, setIsResetVisible] = useState(false)\n\n  async function fetchData () {\n    setIsResetVisible(false)\n    setSearchValue('')\n    const res = await fetch('https://pokeapi.co/api/v2/pokemon?offset=' + offset + '&limit=' + limit)\n    res.json()\n      .then(res => { setPokeData(res.results) })\n      .catch((e) => console.log(`Error: ${e}`))\n  }\n\n  async function onSearchData (value) {\n    switch (searchBy) {\n      case 'Name': {\n        const resName = await fetch('https://pokeapi.co/api/v2/pokemon/' + value)\n        resName.json()\n          .then(res => {\n            setPokeData(null)\n            setPokeItem(res)\n            setIsResetVisible(true)\n          })\n          .catch((e) => console.log(`Error: ${e}`))\n      }\n        break\n      case 'Type':\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [limit, offset])\n\n  function onShowSizeChange (offset, limit) {\n    setLimit(limit)\n  }\n\n  function onChangePage (value) {\n    setOffset(limit * (value - 1))\n  }\n\n  return useObserver(() => (\n    <div className=\"main_body\">\n      <div className=\"search_button\">\n        <Input.Group compact style={{ display: 'flex' }}>\n          <Select style={{ width: '30%' }} defaultValue={searchBy} onChange={setSearchBy}>\n            <Option value=\"Name\">Name</Option>\n            <Option value=\"Type\">Type</Option>\n          </Select>\n          <Search\n            style={{ width: '70%', display: 'flex' }}\n            placeholder=\"Поиск\"\n            size={'large'}\n            value={searchValue}\n            onSearch={value => onSearchData(value)}\n            onChange={e => {\n              setSearchValue(e.target.value)\n            }}\n\n          />\n        </Input.Group>\n        {\n          isResetVisible &&\n          <Button onClick={fetchData}>\n            Reset\n          </Button>\n        }\n      </div>\n      <div className=\"main_poke_body\">\n        {Array.isArray(pokeData) && pokeData.map((item, idx) => (\n          <div className=\"poke_item\" key={item.name + idx}>\n            <PokeItem name={item.name} url = {item.url} />\n          </div>\n        ))}\n        {\n          (!Array.isArray(pokeData)) && pokeItem && pokeItem.id &&\n          <div className=\"poke_item\" key={pokeItem.name}>\n            <PokeItem name={pokeItem.name} url = {pokeItem.url} data={pokeItem}/>\n          </div>\n        }\n      </div>\n      <div>\n        <Pagination\n          showSizeChanger\n          onShowSizeChange={onShowSizeChange}\n          defaultCurrent={1}\n          total={500}\n          onChange={onChangePage}\n        />\n      </div>\n    </div>\n  ))\n}\nexport default Main\n","import React from 'react'\n\nimport PokeProvider from './store/PokeStore'\nimport Main from './components/Main'\nimport './App.css'\nimport 'antd/dist/antd.css'\n\nfunction App () {\n  return (\n    <PokeProvider>\n      <Main />\n    </PokeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}